#!/usr/bin/python3

import re
import sys
import argparse
import traceback
from ansible_remote_checks.runner import Runner

def handle_unknown(message):                                                                                                                                                              
  print("UNKNOWN - %s" % (message))                                                                                                                                                       
  sys.exit(3) 

def check_service():
  parser = argparse.ArgumentParser(description='Linux Service checker')
  parser.add_argument('-H', '--host', help="Hostname to check", type=str, required=True)
  parser.add_argument('-S', '--servicename', help="Servicename", type=str, required=False)
  parser.add_argument('-U', '--user', help='Ansible User', type=str, required=False)
  parser.add_argument('-K', '--keyfile', help='Path to private key file', type=str, required=False)
  parser.add_argument('-R', '--regex', help="Regex for names", type=str, default='.*')

  args = parser.parse_args()

  host = args.host
  servicename = args.servicename
  regex = args.regex
 
  if args.user != None and args.keyfile != None:
    runner_args = (host, args.user, args.keyfile)
  elif args.user != None:
    runner_args = (host, args.user)
  elif args.keyfile != None:
    runner_args = (host, 'icinga-check', args.keyfile)
  else:
    runner_args = (host, 'icinga-check')   
  
  try:
    arguments = {'servname': servicename}
    runner = Runner(*runner_args)
    result = runner.run_play('check_serv', arguments)
  
  except Exception as ex:
    handle_unknown(str(ex))

  status = result.get('ansible_status', '')
  if status != 'ok':
    handle_unknown(result)

  hostinfo = result.get(host)
  services = hostinfo.get("serviceinfo")
 
  ret_status = 0
  status = "OK"
  
  # if service was specified but no info for failed service was gathered
  if servicename and not services:
    print("Service OK - No service in failed state") 
    sys.exit(ret_status) 

  result = {}
  current_status = "OK"

  for service in services:

    if not re.match(regex, service):
      continue

    current_service = services.get(service)
    service_status = current_service.get('status')
    service_message = current_service.get('message')

    print(service_message)

    #create an array for all "messages" (states)
    if not result.get(service_message[0]):
      result[service_message[0]]= []
         
    if service_status == 3:
      ret_status = 2
      status = "CRITICAL"
      current_status = status
    elif service_status > 0:
      current_status = "WARNING"
      if ret_status != 2:
        ret_status = 1
        status = "WARNING"   

    # pre sort messages by state
    result[service_message[0]].append("%s for service %s - service in state %s" % (current_status, service, service_message[0]))

  human_message = ""
  for key, value in result.items():
    if human_message:
      human_message = human_message + ", "
   
    human_message = human_message + "%s service(s) in state %s" % (len(value), key)

  if human_message: 
    output_message = "Service %s - %s" % (status, human_message)
    print(output_message)
  else:
    print("Service %s - No service in failed state" % status)

  for key, value in result.items():
    for message in value:
      print(message)
  
  sys.exit(ret_status)

if __name__ == '__main__':
  try:
    check_service()
  except Exception as ex:
    print("UNKNOWN: An unknown error occured. %s" % ex)
    print(traceback.format_exc())
    sys.exit(3)

