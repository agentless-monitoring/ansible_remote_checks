#!/usr/bin/python

import math
import sys 
import argparse
from ansible_remote_checks.runner import Runner

def handle_unknown(message):                                                                                                                                                              
  print("UNKNOWN - %s" % (message))                                                                                                                                                       
  sys.exit(3) 

class ResultObject(object):
  def __init__(self, drive):
    self.drive = drive
  def __str__(self):
    return str(self.drive)
  def __repr__(self):
    return self.__str__()
  def __lt__(self, other):
    if self.crit < other.crit:
      return False
    elif self.crit == other.crit and self.free_space >= other.free_space:
      return False
    else:
      return True

def convert_size_auto(size, unit=None):
  if unit == "KB" or int(size) == 0:
    return (str(int(size)), "KB")
  size_name = ("KB", "MB", "GB", "TB")
  if unit == None:
    i = int(math.floor(math.log(size,1024)))
  else:
    i = size_name.index(unit)
  p = math.pow(1024,i)
  s = round(size/p,2)
  return (str(s), size_name[i])

if __name__ == '__main__':

  parser = argparse.ArgumentParser(description='check-runner')
  parser.add_argument('-H', '--host', help="API Host", type=str, required=True)
  parser.add_argument('-W', '--warning', help='Warning level (default: 70) in %%', type=int, default=70)
  parser.add_argument('-C', '--critical', help='Critical level (default: 90) in %%', type=int, default=90)
  parser.add_argument('-U', '--user', help='Ansible User', type=str, required=False)
  parser.add_argument('-K', '--keyfile', help='Path to private key file', type=str, required=False)
  parser.add_argument('-S', '--suppress-process-details', help='Suppress process details printing', action='store_true')

  args = parser.parse_args()

  host = args.host
  warning = args.warning
  critical = args.critical
  suppress_process_details = args.suppress_process_details

  if args.user != None and args.keyfile != None:
    runner_args = (host, args.user, args.keyfile)
  elif args.user != None:
    runner_args = (host, args.user)
  elif args.keyfile != None:
    runner_args = (host, 'icinga-check', args.keyfile)
  else:
    runner_args = (host, 'icinga-check')
  
  try:
    runner = Runner(*runner_args)
    arguments = {'memory': True}
    result=runner.run_play('check_memory', arguments)  
  
  except Exception as ex:
    handle_unknown(str(ex))

  status = result.get('ansible_status', '')
  if status != 'ok':
    handle_unknown(result)

  meminfo = result.get(host).get("meminfo")
  
  if not meminfo:
    handle_unknown("No data available") 
  
  ret_status = 0
  results = []
  subjects = ["Memory", "Hugepages"]

  for subject in subjects:
   
    if subject == "Hugepages":
      display_subject = "HUGEPAGES"
      result = ResultObject(subject)
      hugepagesize =  int(meminfo.get("Hugepagesize"))
      memTotal = int(meminfo.get("HugePages_Total"))* hugepagesize
      memAvailable = int(meminfo.get("HugePages_Free")) * hugepagesize
      used_memory = memTotal - memAvailable

      warn_memory = math.ceil((args.warning/100.0)*memTotal)
      crit_memory = math.ceil((args.critical/100.0)*memTotal)

      if memTotal == 0:
        continue

      percentage_free = 100
      if memTotal > 0:
        percentage_free = (memAvailable/float(memTotal))*100
        result.free_space = percentage_free

    elif subject == "Memory":
      display_subject = "MEMORY"
      result = ResultObject(subject)
      hugepagesize =  int(meminfo.get("Hugepagesize"))
      hugepageTotal = int(meminfo.get("HugePages_Total")) * hugepagesize
      memTotal = int(meminfo.get("MemTotal")) - hugepageTotal
      memAvailable = int(meminfo.get("MemAvailable"))
      used_memory = memTotal - memAvailable
      warn_memory = math.ceil((args.warning/100.0)*memTotal)
      crit_memory = math.ceil((args.critical/100.0)*memTotal)  

      percentage_free = (memAvailable/float(memTotal))*100
      result.free_space = percentage_free 

    if used_memory >= crit_memory:
      status = "CRITICAL"
      ret_status = 2
      result.crit = 2
    elif used_memory >= warn_memory:
      status = "WARNING"
      if ret_status != 2:
        ret_status = 1
      result.crit = 1
    else:
      status = "OK"
      result.crit=0

    message = "%s %s - %.4f%% free" % (display_subject, status, percentage_free)
    result.msg_out = message

    perfdata = "%s=%s%s;%s;%s;0;%s" % (display_subject.lower(), used_memory, 'KB', warn_memory, crit_memory, memTotal)
    result.perf_out = perfdata
    results.append(result)

  sort_results = sorted(results)
  if len(sort_results) > 1:
    perfs=map(lambda x: x.perf_out, sort_results)
    msgs=map(lambda x: x.msg_out, sort_results)
    print("%s | %s\n%s" % (msgs[0], reduce(lambda x1, x2: x1+" "+x2, perfs), reduce(lambda x1, x2: x1+"\n"+x2, msgs[1:])))
  else:
    print("%s | %s" % (sort_results[0].msg_out, sort_results[0].perf_out))

  processes  =  meminfo.get("processes")
  
  # In case of warning and critical print the top most processes
  if ret_status in [1, 2] and not suppress_process_details:
    for proc in processes:
      rss = proc["rss"]
      if rss.isnumeric():
        (size, unit) = convert_size_auto(int(rss))
        print("Process: %s - %s %s (PID %s: %s)" % (proc["name"], size, unit, proc["pid"], proc["cmdline"]))

  sys.exit(ret_status)
               
